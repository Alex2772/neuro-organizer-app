name: Build

on:
  push:
    branches:
      - master
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GIT_SUBMODULE_STRATEGY: recursive

permissions:
  contents: write

jobs:
  build-android:
   name: "Android"
   runs-on: ubuntu-latest
   steps:
     - uses: actions/checkout@v2
       with:
         submodules: true
     - uses: actions/setup-java@v1
       with: { java-version: '11' }

     - name: Install Linux dependencies
       run: sudo apt-get update && sudo apt-get install pkg-config libglew-dev zlib1g-dev libssl-dev libcrypt-dev libcurl4-openssl-dev libgtk-3-dev libdbus-1-dev libfontconfig-dev ninja-build libpulse-dev


     - name: Configure CMake 
       run: cmake -GNinja -B ${{github.workspace}}/build -DAUI_BUILD_FOR=android -DAUI_BUILD_EXAMPLES=TRUE

     - name: Build 
       run: cmake --build ${{github.workspace}}/build

  build-ios-debug:
   name: "iOS Debug"
   runs-on: macos-latest
   steps:
     - uses: actions/checkout@v2
       with:
         submodules: true

     - name: Install macos dependencies
       run: brew install ninja 
     
     - name: Configure CMake
       run: cmake -GNinja -B ${{github.workspace}}/build -DAUI_BUILD_FOR=ios -DAUI_BUILD_EXAMPLES=TRUE -DAUI_IOS_CODE_SIGNING_REQUIRED=FALSE

     - name: Build app 
       run: cmake --build ${{github.workspace}}/build

  build-desktop:
    name: ${{ matrix.os }} ${{ matrix.shared_or_static }} ${{ matrix.debug_or_release }} ${{ matrix.arch }} ${{ matrix.compiler }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest, macos-14]
        debug_or_release: [Debug, Release]
        shared_or_static: [shared, static]
        arch: [x86_64]
        compiler: ["default", "clang"]
        exclude:
          - os: windows-latest
            compiler: "clang"
          - os: macos-latest
            compiler: "clang" # default only
        include:
          - os: windows-latest
            generator: "Visual Studio 17 2022"
            additional_cmake_flags: '-A x64'

          - os: ubuntu-latest
            generator: "Ninja"
            additional_cmake_flags: ''

          - os: macos-14
            generator: "Ninja"

          - os: ubuntu-latest
            generator: "Ninja"
            additional_cmake_flags: ''
            debug_or_release: RelWithDebInfo
            shared_or_static: static

          - os: windows-latest
            generator: "Visual Studio 17 2022"
            additional_cmake_flags: '-A x64'
            debug_or_release: RelWithDebInfo
            shared_or_static: static

    steps:
      - uses: actions/checkout@v4
        with:
          submodules: true

      # Cache AUI boot directory/build
      # [cache example]
      - name: Cache AUI.BOOT deps
        id: cache-aui-boot
        uses: actions/cache@v3
        env:
          cache-name: aui-boot-${{ matrix.shared_or_static }}-${{ matrix.debug_or_release }}-${{ matrix.arch }}
        with:
          path: |
            ~/.aui
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-
      # [cache example]

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install pkg-config libglew-dev zlib1g-dev libssl-dev libcrypt-dev libcurl4-openssl-dev libgtk-3-dev libdbus-1-dev libfontconfig-dev ninja-build libpulse-dev

      - name: Install macos dependencies
        if: runner.os == 'macOS'
        run: brew install ninja

      - name: Setup clang
        if: matrix.compiler == 'clang'
        run: |
          echo "CC=/usr/bin/clang " >> $GITHUB_ENV
          echo "CXX=/usr/bin/clang++ " >> $GITHUB_ENV
      - name: Configure CMake
        # Configure CMake in a 'build' subdirectory. `CMAKE_BUILD_TYPE` is only required if you are using a single-configuration generator such as make.
        # See https://cmake.org/cmake/help/latest/variable/CMAKE_BUILD_TYPE.html?highlight=cmake_build_type
        run: cmake -G "${{ matrix.generator }}" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.debug_or_release}} -DBUILD_SHARED_LIBS=${{ matrix.shared_or_static == 'shared' && 'ON' || 'OFF' }} ${{matrix.additional_cmake_flags}} -DAUIB_PRODUCED_PACKAGES_SELF_SUFFICIENT=ON -DAUI_BUILD_AUDIO=OFF

      - name: Build project
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.debug_or_release}}

      - name: Build AUI tests
        # Build your program with the given configuration
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.debug_or_release}} --target Tests

      - name: Run AUI tests
        if: runner.os == 'Windows'
        working-directory: ${{github.workspace}}/build/bin/${{ matrix.debug_or_release }}
        run: ${{github.workspace}}/build/bin/${{ matrix.debug_or_release }}/Tests.exe

      - name: Run AUI tests
        if: runner.os == 'Linux'
        working-directory: ${{github.workspace}}/build/bin
        run: ${{github.workspace}}/build/bin/Tests
