name: Build

on:
  push:
    branches:
      - master
  pull_request:

concurrency:
  group: ${{ github.workflow }}-${{ github.event.pull_request.number || github.ref }}
  cancel-in-progress: true

env:
  GIT_SUBMODULE_STRATEGY: recursive

permissions:
  contents: write

jobs:
  build-desktop:
    name: ${{ matrix.os }}
    runs-on: ${{ matrix.os }}
    strategy:
      fail-fast: false
      matrix:
        os: [windows-latest, ubuntu-latest]
        debug_or_release: [Debug, Release]
        shared_or_static: [shared, static]
        arch: [x86_64]
        generator: ["Ninja"]

      include:
        - os: windows-latest
          generator: "Visual Studio 17 2022"
          additional_cmake_flags: '-A x64'

        - os: ubuntu-latest
          generator: "Ninja"
          additional_cmake_flags: ''

    steps:
      - name: Fetch sources
        uses: actions/checkout@v4

      # Cache AUI boot directory/build
      # [cache example]

      - name: Cache AUI.BOOT deps
        id: cache-aui-boot
        uses: actions/cache@v3
        env:
          cache-name: aui-boot-${{ matrix.shared_or_static }}-${{ matrix.debug_or_release }}-${{ matrix.arch }}
        with:
          path: |
            ~/.aui
          key: ${{ runner.os }}-build-${{ env.cache-name }}-${{ hashFiles('**/CMakeLists.txt') }}
          restore-keys: |
            ${{ runner.os }}-build-${{ env.cache-name }}-
            ${{ runner.os }}-build-
            ${{ runner.os }}-

      - name: Install Linux dependencies
        if: runner.os == 'Linux'
        run: sudo apt-get update && sudo apt-get install pkg-config libglew-dev zlib1g-dev libssl-dev libcrypt-dev libcurl4-openssl-dev libgtk-3-dev libfontconfig-dev ninja-build libpulse-dev

      - name: Install macos dependencies
        if: runner.os == 'macos-latest'
        run: brew install ninja

      - name: Configure CMake
        run: cmake -G "${{ matrix.generator }}" -B ${{github.workspace}}/build -DCMAKE_BUILD_TYPE=${{matrix.debug_or_release}} -DBUILD_SHARED_LIBS=${{ matrix.shared_or_static == 'shared' && 'ON' || 'OFF' }} ${{matrix.additional_cmake_flags}} -DAUIB_PRODUCED_PACKAGES_SELF_SUFFICIENT=ON -DAUI_BUILD_AUDIO=OFF

      - name: Build project
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.debug_or_release}}

      - name: Build AUI tests
        run: cmake --build ${{github.workspace}}/build --config ${{matrix.debug_or_release}} --target Tests

      - name: Run AUI tests
        if: runner.os == 'Windows'
        working-directory: ${{github.workspace}}/build/bin/${{ matrix.debug_or_release }}
        run: ${{github.workspace}}/build/bin/${{ matrix.debug_or_release }}/Tests.exe

      - name: Run AUI tests
        if: runner.os == 'Linux'
        working-directory: ${{github.workspace}}/build/bin
        run: ${{github.workspace}}/build/bin/Tests

      - name: Pack Windows Setup
        if: runner.os == 'Windows'
        working-directory: ${{github.workspace}}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=INNOSETUP
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Pack Windows Portable
        if: runner.os == 'Windows'
        working-directory: ${{github.workspace}}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=AUI_PORTABLE_ZIP
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Pack Linux Portable (ZIP)
        if: runner.os == 'Linux'
        working-directory: ${{github.workspace}}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=AUI_PORTABLE_ZIP
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Pack Linux Portable (tar.gz)
        if: runner.os == 'Linux'
        working-directory: ${{github.workspace}}/build
        run: |
          cmake . -DAUI_APP_PACKAGING=AUI_PORTABLE_TGZ
          cmake --build . --config RelWithDebInfo
          cpack . -CRelWithDebInfo -B artifacts

      - name: Upload
        uses: actions/upload-artifact@v4
        with:
          path: ${{github.workspace}}/build/artifacts/*.*
          name: ${{ runner.os }}


  release:
    runs-on: ubuntu-latest
    permissions: write-all
    needs: [deployment-tests-run-minimal-app, deployment-tests-validate-minimal-app]
    if: github.event_name != 'pull_request'
    name: "Create release draft"
    steps:
      - name: Checkout
        if: ${{ !contains(github.ref, 'tags/v') }}
        uses: actions/checkout@v4

      # Remove old release drafts
      - name: Remove Old Release Drafts
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh api repos/{owner}/{repo}/releases \
            --jq '.[] | select(.draft == true) | .id' \
            | xargs -I '{}' gh api -X DELETE repos/{owner}/{repo}/releases/{} 
      - name: Retrieve version
        if: ${{ contains(github.ref, 'tags/v') }}
        run: |
          echo "TAG_NAME=${{ github.ref }} " >> $GITHUB_ENV
          echo "RELEASE_NAME=${{ github.ref }} " >> $GITHUB_ENV
      - name: Increment version
        if: ${{ !contains(github.ref, 'tags/v') }}
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          python3 .github/generate-next-version.py $(gh release list -L 1 --json name --jq '.[] .name')
      - name: Output version
        id: version
        run: |
          echo "ref=$TAG_NAME" >> $GITHUB_OUTPUT
      - name: Download artifact
        uses: actions/download-artifact@v4
        with:
          path: artifacts
          merge-multiple: 'true'
          pattern: aui*

      - name: Publish
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          gh release create "${{ env.TAG_NAME }}" \
            --latest=false \
            --draft \
            --prerelease \
            --generate-notes \
            --title "${{ env.TAG_NAME }}" \
            --target $GITHUB_SHA \
            artifacts/*.*
    outputs:
      upload_url: ${{ steps.create_release.outputs.upload_url }}
      ref: ${{ steps.version.outputs.ref }}
